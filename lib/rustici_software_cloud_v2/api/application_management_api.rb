=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0 beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.3

=end

require 'uri'

module RusticiSoftwareCloudV2
  class ApplicationManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new application
    # @param application_name 
    # @param [Hash] opts the optional parameters
    # @return [ApplicationSchema]
    def create_application(application_name, opts = {})
      data, _status_code, _headers = create_application_with_http_info(application_name, opts)
      data
    end

    # Create a new application
    # @param application_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationSchema, Fixnum, Hash)>] ApplicationSchema data, response status code and response headers
    def create_application_with_http_info(application_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.create_application ...'
      end
      # verify the required parameter 'application_name' is set
      if @api_client.config.client_side_validation && application_name.nil?
        fail ArgumentError, "Missing the required parameter 'application_name' when calling ApplicationManagementApi.create_application"
      end
      # resource path
      local_var_path = '/appManagement/applications/{applicationName}'.sub('{' + 'applicationName' + '}', application_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#create_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create credential
    # @param child_app_id 
    # @param credential_request 
    # @param [Hash] opts the optional parameters
    # @return [CredentialCreatedSchema]
    def create_credential(child_app_id, credential_request, opts = {})
      data, _status_code, _headers = create_credential_with_http_info(child_app_id, credential_request, opts)
      data
    end

    # Create credential
    # @param child_app_id 
    # @param credential_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CredentialCreatedSchema, Fixnum, Hash)>] CredentialCreatedSchema data, response status code and response headers
    def create_credential_with_http_info(child_app_id, credential_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.create_credential ...'
      end
      # verify the required parameter 'child_app_id' is set
      if @api_client.config.client_side_validation && child_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.create_credential"
      end
      # verify the required parameter 'credential_request' is set
      if @api_client.config.client_side_validation && credential_request.nil?
        fail ArgumentError, "Missing the required parameter 'credential_request' when calling ApplicationManagementApi.create_credential"
      end
      # resource path
      local_var_path = '/appManagement/{childAppId}/credentials'.sub('{' + 'childAppId' + '}', child_app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(credential_request)
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CredentialCreatedSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#create_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create token
    # Creates, signs and returns a token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
    # @param token_request 
    # @param [Hash] opts the optional parameters
    # @return [StringResultSchema]
    def create_token(token_request, opts = {})
      data, _status_code, _headers = create_token_with_http_info(token_request, opts)
      data
    end

    # Create token
    # Creates, signs and returns a token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
    # @param token_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringResultSchema, Fixnum, Hash)>] StringResultSchema data, response status code and response headers
    def create_token_with_http_info(token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.create_token ...'
      end
      # verify the required parameter 'token_request' is set
      if @api_client.config.client_side_validation && token_request.nil?
        fail ArgumentError, "Missing the required parameter 'token_request' when calling ApplicationManagementApi.create_token"
      end
      # resource path
      local_var_path = '/appManagement/token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(token_request)
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StringResultSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#create_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown.
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_application(child_app_id, opts = {})
      delete_application_with_http_info(child_app_id, opts)
      nil
    end

    # Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown.
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_application_with_http_info(child_app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.delete_application ...'
      end
      # verify the required parameter 'child_app_id' is set
      if @api_client.config.client_side_validation && child_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.delete_application"
      end
      # resource path
      local_var_path = '/appManagement/applications/{childAppId}'.sub('{' + 'childAppId' + '}', child_app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#delete_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Removes `credentialId` credentials
    # @param child_app_id 
    # @param credential_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_credential(child_app_id, credential_id, opts = {})
      delete_credential_with_http_info(child_app_id, credential_id, opts)
      nil
    end

    # Removes &#x60;credentialId&#x60; credentials
    # @param child_app_id 
    # @param credential_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_credential_with_http_info(child_app_id, credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.delete_credential ...'
      end
      # verify the required parameter 'child_app_id' is set
      if @api_client.config.client_side_validation && child_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.delete_credential"
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling ApplicationManagementApi.delete_credential"
      end
      # resource path
      local_var_path = '/appManagement/{childAppId}/credentials/{credentialId}'.sub('{' + 'childAppId' + '}', child_app_id.to_s).sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#delete_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns all configuration settings for this level
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
    # @option opts [BOOLEAN] :include_metadata  (default to false)
    # @return [SettingListSchema]
    def get_application_configuration(opts = {})
      data, _status_code, _headers = get_application_configuration_with_http_info(opts)
      data
    end

    # Returns all configuration settings for this level
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
    # @option opts [BOOLEAN] :include_metadata 
    # @return [Array<(SettingListSchema, Fixnum, Hash)>] SettingListSchema data, response status code and response headers
    def get_application_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.get_application_configuration ...'
      end
      if @api_client.config.client_side_validation && opts[:'learning_standard'] && !['SCORM_11', 'SCORM_12', 'SCORM_2004_2ND_EDITION', 'SCORM_2004_3RD_EDITION', 'SCORM_2004_4TH_EDITION', 'AICC', 'XAPI', 'CMI5'].include?(opts[:'learning_standard'])
        fail ArgumentError, 'invalid value for "learning_standard", must be one of SCORM_11, SCORM_12, SCORM_2004_2ND_EDITION, SCORM_2004_3RD_EDITION, SCORM_2004_4TH_EDITION, AICC, XAPI, CMI5'
      end
      # resource path
      local_var_path = '/appManagement/configuration'

      # query parameters
      query_params = {}
      query_params[:'learningStandard'] = opts[:'learning_standard'] if !opts[:'learning_standard'].nil?
      query_params[:'singleSco'] = opts[:'single_sco'] if !opts[:'single_sco'].nil?
      query_params[:'includeMetadata'] = opts[:'include_metadata'] if !opts[:'include_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SettingListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#get_application_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get list of all applications in this realm.
    # @param [Hash] opts the optional parameters
    # @return [ApplicationListSchema]
    def get_application_list(opts = {})
      data, _status_code, _headers = get_application_list_with_http_info(opts)
      data
    end

    # Get list of all applications in this realm.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationListSchema, Fixnum, Hash)>] ApplicationListSchema data, response status code and response headers
    def get_application_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.get_application_list ...'
      end
      # resource path
      local_var_path = '/appManagement/applications'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#get_application_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of credentials
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @return [CredentialListSchema]
    def get_credentials(child_app_id, opts = {})
      data, _status_code, _headers = get_credentials_with_http_info(child_app_id, opts)
      data
    end

    # List of credentials
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CredentialListSchema, Fixnum, Hash)>] CredentialListSchema data, response status code and response headers
    def get_credentials_with_http_info(child_app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.get_credentials ...'
      end
      # verify the required parameter 'child_app_id' is set
      if @api_client.config.client_side_validation && child_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.get_credentials"
      end
      # resource path
      local_var_path = '/appManagement/{childAppId}/credentials'.sub('{' + 'childAppId' + '}', child_app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CredentialListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#get_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set configuration settings for this level.
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
    # @return [nil]
    def set_application_configuration(configuration_settings, opts = {})
      set_application_configuration_with_http_info(configuration_settings, opts)
      nil
    end

    # Set configuration settings for this level.
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_application_configuration_with_http_info(configuration_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.set_application_configuration ...'
      end
      # verify the required parameter 'configuration_settings' is set
      if @api_client.config.client_side_validation && configuration_settings.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_settings' when calling ApplicationManagementApi.set_application_configuration"
      end
      if @api_client.config.client_side_validation && opts[:'learning_standard'] && !['SCORM_11', 'SCORM_12', 'SCORM_2004_2ND_EDITION', 'SCORM_2004_3RD_EDITION', 'SCORM_2004_4TH_EDITION', 'AICC', 'XAPI', 'CMI5'].include?(opts[:'learning_standard'])
        fail ArgumentError, 'invalid value for "learning_standard", must be one of SCORM_11, SCORM_12, SCORM_2004_2ND_EDITION, SCORM_2004_3RD_EDITION, SCORM_2004_4TH_EDITION, AICC, XAPI, CMI5'
      end
      # resource path
      local_var_path = '/appManagement/configuration'

      # query parameters
      query_params = {}
      query_params[:'learningStandard'] = opts[:'learning_standard'] if !opts[:'learning_standard'].nil?
      query_params[:'singleSco'] = opts[:'single_sco'] if !opts[:'single_sco'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration_settings)
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#set_application_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the name or status associated with `credentialId`
    # @param child_app_id 
    # @param credential_id 
    # @param credential_update 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_credential(child_app_id, credential_id, credential_update, opts = {})
      update_credential_with_http_info(child_app_id, credential_id, credential_update, opts)
      nil
    end

    # Update the name or status associated with &#x60;credentialId&#x60;
    # @param child_app_id 
    # @param credential_id 
    # @param credential_update 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_credential_with_http_info(child_app_id, credential_id, credential_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationManagementApi.update_credential ...'
      end
      # verify the required parameter 'child_app_id' is set
      if @api_client.config.client_side_validation && child_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.update_credential"
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling ApplicationManagementApi.update_credential"
      end
      # verify the required parameter 'credential_update' is set
      if @api_client.config.client_side_validation && credential_update.nil?
        fail ArgumentError, "Missing the required parameter 'credential_update' when calling ApplicationManagementApi.update_credential"
      end
      # resource path
      local_var_path = '/appManagement/{childAppId}/credentials/{credentialId}'.sub('{' + 'childAppId' + '}', child_app_id.to_s).sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(credential_update)
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#update_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
