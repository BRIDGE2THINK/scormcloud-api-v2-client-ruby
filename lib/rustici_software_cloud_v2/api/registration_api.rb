=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0 beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.3

=end

require 'uri'

module RusticiSoftwareCloudV2
  class RegistrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new instance for this registration specified by the registration ID
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_new_registration_instance(registration_id, opts = {})
      create_new_registration_instance_with_http_info(registration_id, opts)
      nil
    end

    # Create a new instance for this registration specified by the registration ID
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_new_registration_instance_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.create_new_registration_instance ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.create_new_registration_instance"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/instances'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#create_new_registration_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a registration.
    # @param registration 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :course_version The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to.
    # @return [nil]
    def create_registration(registration, opts = {})
      create_registration_with_http_info(registration, opts)
      nil
    end

    # Create a registration.
    # @param registration 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :course_version The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_registration_with_http_info(registration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.create_registration ...'
      end
      # verify the required parameter 'registration' is set
      if @api_client.config.client_side_validation && registration.nil?
        fail ArgumentError, "Missing the required parameter 'registration' when calling RegistrationApi.create_registration"
      end
      # resource path
      local_var_path = '/registrations'

      # query parameters
      query_params = {}
      query_params[:'courseVersion'] = opts[:'course_version'] if !opts[:'course_version'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(registration)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#create_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete `registrationId`
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration(registration_id, opts = {})
      delete_registration_with_http_info(registration_id, opts)
      nil
    end

    # Delete &#x60;registrationId&#x60;
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.delete_registration ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Clears the `settingId` value for this registration
    # @param registration_id id for this registration
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_configuration_setting(registration_id, setting_id, opts = {})
      delete_registration_configuration_setting_with_http_info(registration_id, setting_id, opts)
      nil
    end

    # Clears the &#x60;settingId&#x60; value for this registration
    # @param registration_id id for this registration
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_configuration_setting_with_http_info(registration_id, setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.delete_registration_configuration_setting ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_configuration_setting"
      end
      # verify the required parameter 'setting_id' is set
      if @api_client.config.client_side_validation && setting_id.nil?
        fail ArgumentError, "Missing the required parameter 'setting_id' when calling RegistrationApi.delete_registration_configuration_setting"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/configuration/{settingId}'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'settingId' + '}', setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_configuration_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Clears the `settingId` value for this registration instance
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_instance_configuration_setting(registration_id, instance_id, setting_id, opts = {})
      delete_registration_instance_configuration_setting_with_http_info(registration_id, instance_id, setting_id, opts)
      nil
    end

    # Clears the &#x60;settingId&#x60; value for this registration instance
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_instance_configuration_setting_with_http_info(registration_id, instance_id, setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.delete_registration_instance_configuration_setting ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_instance_configuration_setting"
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.delete_registration_instance_configuration_setting"
      end
      if @api_client.config.client_side_validation && instance_id < 0
        fail ArgumentError, 'invalid value for "instance_id" when calling RegistrationApi.delete_registration_instance_configuration_setting, must be greater than or equal to 0.'
      end

      # verify the required parameter 'setting_id' is set
      if @api_client.config.client_side_validation && setting_id.nil?
        fail ArgumentError, "Missing the required parameter 'setting_id' when calling RegistrationApi.delete_registration_instance_configuration_setting"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/instances/{instanceId}/configuration/{settingId}'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s).sub('{' + 'settingId' + '}', setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_instance_configuration_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete registration progress (clear registration)
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_progress(registration_id, opts = {})
      delete_registration_progress_with_http_info(registration_id, opts)
      nil
    end

    # Delete registration progress (clear registration)
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_progress_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.delete_registration_progress ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_progress"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/progress'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete tags for this registration
    # @param registration_id id for this registration
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_tags(registration_id, tags, opts = {})
      delete_registration_tags_with_http_info(registration_id, tags, opts)
      nil
    end

    # Delete tags for this registration
    # @param registration_id id for this registration
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_tags_with_http_info(registration_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.delete_registration_tags ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_tags"
      end
      # verify the required parameter 'tags' is set
      if @api_client.config.client_side_validation && tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling RegistrationApi.delete_registration_tags"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/tags'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete global data associated with `registrationId`
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registrations_global_data(registration_id, opts = {})
      delete_registrations_global_data_with_http_info(registration_id, opts)
      nil
    end

    # Delete global data associated with &#x60;registrationId&#x60;
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registrations_global_data_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.delete_registrations_global_data ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registrations_global_data"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/globalData'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registrations_global_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns all configuration settings for this registration
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata  (default to false)
    # @return [SettingListSchema]
    def get_registration_configuration(registration_id, opts = {})
      data, _status_code, _headers = get_registration_configuration_with_http_info(registration_id, opts)
      data
    end

    # Returns all configuration settings for this registration
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata 
    # @return [Array<(SettingListSchema, Fixnum, Hash)>] SettingListSchema data, response status code and response headers
    def get_registration_configuration_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_configuration ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_configuration"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/configuration'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeMetadata'] = opts[:'include_metadata'] if !opts[:'include_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SettingListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns all configuration settings for this registration instance
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata  (default to false)
    # @return [SettingListSchema]
    def get_registration_instance_configuration(registration_id, instance_id, opts = {})
      data, _status_code, _headers = get_registration_instance_configuration_with_http_info(registration_id, instance_id, opts)
      data
    end

    # Returns all configuration settings for this registration instance
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata 
    # @return [Array<(SettingListSchema, Fixnum, Hash)>] SettingListSchema data, response status code and response headers
    def get_registration_instance_configuration_with_http_info(registration_id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_instance_configuration ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instance_configuration"
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.get_registration_instance_configuration"
      end
      if @api_client.config.client_side_validation && instance_id < 0
        fail ArgumentError, 'invalid value for "instance_id" when calling RegistrationApi.get_registration_instance_configuration, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/registrations/{registrationId}/instances/{instanceId}/configuration'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeMetadata'] = opts[:'include_metadata'] if !opts[:'include_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SettingListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instance_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns history of this registration's launches
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_history_log Whether to include the history log in the launch history (default to false)
    # @return [LaunchHistoryListSchema]
    def get_registration_instance_launch_history(registration_id, instance_id, opts = {})
      data, _status_code, _headers = get_registration_instance_launch_history_with_http_info(registration_id, instance_id, opts)
      data
    end

    # Returns history of this registration&#39;s launches
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_history_log Whether to include the history log in the launch history
    # @return [Array<(LaunchHistoryListSchema, Fixnum, Hash)>] LaunchHistoryListSchema data, response status code and response headers
    def get_registration_instance_launch_history_with_http_info(registration_id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_instance_launch_history ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instance_launch_history"
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.get_registration_instance_launch_history"
      end
      if @api_client.config.client_side_validation && instance_id < 0
        fail ArgumentError, 'invalid value for "instance_id" when calling RegistrationApi.get_registration_instance_launch_history, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/registrations/{registrationId}/instances/{instanceId}/launchHistory'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeHistoryLog'] = opts[:'include_history_log'] if !opts[:'include_history_log'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LaunchHistoryListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instance_launch_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get registration progress for instance `instanceId` of `registrationId`
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results (default to false)
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results (default to false)
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results (default to false)
    # @return [RegistrationSchema]
    def get_registration_instance_progress(registration_id, instance_id, opts = {})
      data, _status_code, _headers = get_registration_instance_progress_with_http_info(registration_id, instance_id, opts)
      data
    end

    # Get registration progress for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results
    # @return [Array<(RegistrationSchema, Fixnum, Hash)>] RegistrationSchema data, response status code and response headers
    def get_registration_instance_progress_with_http_info(registration_id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_instance_progress ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instance_progress"
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.get_registration_instance_progress"
      end
      if @api_client.config.client_side_validation && instance_id < 0
        fail ArgumentError, 'invalid value for "instance_id" when calling RegistrationApi.get_registration_instance_progress, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/registrations/{registrationId}/instances/{instanceId}'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeChildResults'] = opts[:'include_child_results'] if !opts[:'include_child_results'].nil?
      query_params[:'includeInteractionsAndObjectives'] = opts[:'include_interactions_and_objectives'] if !opts[:'include_interactions_and_objectives'].nil?
      query_params[:'includeRuntime'] = opts[:'include_runtime'] if !opts[:'include_runtime'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instance_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get xAPI statements for instance `instanceId` of `registrationId`
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [XapiStatementResult]
    def get_registration_instance_statements(registration_id, instance_id, opts = {})
      data, _status_code, _headers = get_registration_instance_statements_with_http_info(registration_id, instance_id, opts)
      data
    end

    # Get xAPI statements for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [Array<(XapiStatementResult, Fixnum, Hash)>] XapiStatementResult data, response status code and response headers
    def get_registration_instance_statements_with_http_info(registration_id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_instance_statements ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instance_statements"
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.get_registration_instance_statements"
      end
      if @api_client.config.client_side_validation && instance_id < 0
        fail ArgumentError, 'invalid value for "instance_id" when calling RegistrationApi.get_registration_instance_statements, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/registrations/{registrationId}/instances/{instanceId}/xAPIStatements'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XapiStatementResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instance_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all the instances of this the registration specified by the registration ID
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results (default to false)
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results (default to false)
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results (default to false)
    # @return [RegistrationListSchema]
    def get_registration_instances(registration_id, opts = {})
      data, _status_code, _headers = get_registration_instances_with_http_info(registration_id, opts)
      data
    end

    # Get all the instances of this the registration specified by the registration ID
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results
    # @return [Array<(RegistrationListSchema, Fixnum, Hash)>] RegistrationListSchema data, response status code and response headers
    def get_registration_instances_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_instances ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instances"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/instances'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'includeChildResults'] = opts[:'include_child_results'] if !opts[:'include_child_results'].nil?
      query_params[:'includeInteractionsAndObjectives'] = opts[:'include_interactions_and_objectives'] if !opts[:'include_interactions_and_objectives'].nil?
      query_params[:'includeRuntime'] = opts[:'include_runtime'] if !opts[:'include_runtime'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns history of this registration's launches
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_history_log Whether to include the history log in the launch history (default to false)
    # @return [LaunchHistoryListSchema]
    def get_registration_launch_history(registration_id, opts = {})
      data, _status_code, _headers = get_registration_launch_history_with_http_info(registration_id, opts)
      data
    end

    # Returns history of this registration&#39;s launches
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_history_log Whether to include the history log in the launch history
    # @return [Array<(LaunchHistoryListSchema, Fixnum, Hash)>] LaunchHistoryListSchema data, response status code and response headers
    def get_registration_launch_history_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_launch_history ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_launch_history"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/launchHistory'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeHistoryLog'] = opts[:'include_history_log'] if !opts[:'include_history_log'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LaunchHistoryListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_launch_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the link to use to launch this registration
    # @param registration_id id for this registration
    # @param launch_link_request 
    # @param [Hash] opts the optional parameters
    # @return [LaunchLinkSchema]
    def get_registration_launch_link(registration_id, launch_link_request, opts = {})
      data, _status_code, _headers = get_registration_launch_link_with_http_info(registration_id, launch_link_request, opts)
      data
    end

    # Returns the link to use to launch this registration
    # @param registration_id id for this registration
    # @param launch_link_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LaunchLinkSchema, Fixnum, Hash)>] LaunchLinkSchema data, response status code and response headers
    def get_registration_launch_link_with_http_info(registration_id, launch_link_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_launch_link ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_launch_link"
      end
      # verify the required parameter 'launch_link_request' is set
      if @api_client.config.client_side_validation && launch_link_request.nil?
        fail ArgumentError, "Missing the required parameter 'launch_link_request' when calling RegistrationApi.get_registration_launch_link"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/launchLink'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(launch_link_request)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LaunchLinkSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_launch_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get registration progress for `registrationId`
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results (default to false)
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results (default to false)
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results (default to false)
    # @return [RegistrationSchema]
    def get_registration_progress(registration_id, opts = {})
      data, _status_code, _headers = get_registration_progress_with_http_info(registration_id, opts)
      data
    end

    # Get registration progress for &#x60;registrationId&#x60;
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results
    # @return [Array<(RegistrationSchema, Fixnum, Hash)>] RegistrationSchema data, response status code and response headers
    def get_registration_progress_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_progress ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_progress"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeChildResults'] = opts[:'include_child_results'] if !opts[:'include_child_results'].nil?
      query_params[:'includeInteractionsAndObjectives'] = opts[:'include_interactions_and_objectives'] if !opts[:'include_interactions_and_objectives'].nil?
      query_params[:'includeRuntime'] = opts[:'include_runtime'] if !opts[:'include_runtime'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get xAPI statements for `registrationId`
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [XapiStatementResult]
    def get_registration_statements(registration_id, opts = {})
      data, _status_code, _headers = get_registration_statements_with_http_info(registration_id, opts)
      data
    end

    # Get xAPI statements for &#x60;registrationId&#x60;
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [Array<(XapiStatementResult, Fixnum, Hash)>] XapiStatementResult data, response status code and response headers
    def get_registration_statements_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_statements ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_statements"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/xAPIStatements'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XapiStatementResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the tags for this registration
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [TagListSchema]
    def get_registration_tags(registration_id, opts = {})
      data, _status_code, _headers = get_registration_tags_with_http_info(registration_id, opts)
      data
    end

    # Get the tags for this registration
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagListSchema, Fixnum, Hash)>] TagListSchema data, response status code and response headers
    def get_registration_tags_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registration_tags ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_tags"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/tags'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets a list of registrations including a summary of the status of each registration.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only registrations for the specified course id will be included.
    # @option opts [String] :learner_id Only registrations for the specified learner id will be included.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results (default to false)
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results (default to false)
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results (default to false)
    # @return [RegistrationListSchema]
    def get_registrations(opts = {})
      data, _status_code, _headers = get_registrations_with_http_info(opts)
      data
    end

    # Gets a list of registrations including a summary of the status of each registration.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only registrations for the specified course id will be included.
    # @option opts [String] :learner_id Only registrations for the specified learner id will be included.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results
    # @return [Array<(RegistrationListSchema, Fixnum, Hash)>] RegistrationListSchema data, response status code and response headers
    def get_registrations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.get_registrations ...'
      end
      # resource path
      local_var_path = '/registrations'

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'learnerId'] = opts[:'learner_id'] if !opts[:'learner_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'includeChildResults'] = opts[:'include_child_results'] if !opts[:'include_child_results'].nil?
      query_params[:'includeInteractionsAndObjectives'] = opts[:'include_interactions_and_objectives'] if !opts[:'include_interactions_and_objectives'].nil?
      query_params[:'includeRuntime'] = opts[:'include_runtime'] if !opts[:'include_runtime'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set the tags for this registration
    # @param registration_id id for this registration
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_registration_tags(registration_id, tags, opts = {})
      put_registration_tags_with_http_info(registration_id, tags, opts)
      nil
    end

    # Set the tags for this registration
    # @param registration_id id for this registration
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_registration_tags_with_http_info(registration_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.put_registration_tags ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.put_registration_tags"
      end
      # verify the required parameter 'tags' is set
      if @api_client.config.client_side_validation && tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling RegistrationApi.put_registration_tags"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/tags'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#put_registration_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sets all of the provided tags on all of the provided registrations
    # @param batch 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_registration_tags_batch(batch, opts = {})
      put_registration_tags_batch_with_http_info(batch, opts)
      nil
    end

    # Sets all of the provided tags on all of the provided registrations
    # @param batch 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_registration_tags_batch_with_http_info(batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.put_registration_tags_batch ...'
      end
      # verify the required parameter 'batch' is set
      if @api_client.config.client_side_validation && batch.nil?
        fail ArgumentError, "Missing the required parameter 'batch' when calling RegistrationApi.put_registration_tags_batch"
      end
      # resource path
      local_var_path = '/registrations/tags'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(batch)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#put_registration_tags_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Does this registration exist?
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def registration_exists(registration_id, opts = {})
      registration_exists_with_http_info(registration_id, opts)
      nil
    end

    # Does this registration exist?
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def registration_exists_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.registration_exists ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.registration_exists"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#registration_exists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set configuration settings for this registration.
    # @param registration_id id for this registration
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_registration_configuration(registration_id, configuration_settings, opts = {})
      set_registration_configuration_with_http_info(registration_id, configuration_settings, opts)
      nil
    end

    # Set configuration settings for this registration.
    # @param registration_id id for this registration
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_registration_configuration_with_http_info(registration_id, configuration_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.set_registration_configuration ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.set_registration_configuration"
      end
      # verify the required parameter 'configuration_settings' is set
      if @api_client.config.client_side_validation && configuration_settings.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_settings' when calling RegistrationApi.set_registration_configuration"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/configuration'.sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration_settings)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#set_registration_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set configuration settings for this registration instance.
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_registration_instance_configuration(registration_id, instance_id, configuration_settings, opts = {})
      set_registration_instance_configuration_with_http_info(registration_id, instance_id, configuration_settings, opts)
      nil
    end

    # Set configuration settings for this registration instance.
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_registration_instance_configuration_with_http_info(registration_id, instance_id, configuration_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RegistrationApi.set_registration_instance_configuration ...'
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.set_registration_instance_configuration"
      end
      # verify the required parameter 'instance_id' is set
      if @api_client.config.client_side_validation && instance_id.nil?
        fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.set_registration_instance_configuration"
      end
      if @api_client.config.client_side_validation && instance_id < 0
        fail ArgumentError, 'invalid value for "instance_id" when calling RegistrationApi.set_registration_instance_configuration, must be greater than or equal to 0.'
      end

      # verify the required parameter 'configuration_settings' is set
      if @api_client.config.client_side_validation && configuration_settings.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_settings' when calling RegistrationApi.set_registration_instance_configuration"
      end
      # resource path
      local_var_path = '/registrations/{registrationId}/instances/{instanceId}/configuration'.sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration_settings)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#set_registration_instance_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
